// Vendor
@mixin vendor-prefix($name, $value) {
  @each $vendor in ("-webkit-", "-moz-", "-ms-", "-o-", "") {
    #{$vendor}#{$name}: #{$value};
  }
}

// Vendor Keyframes
@mixin keyframes-vendor-prefix($name) {
  @keyframes #{$name} {
    @content;
  }

  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @-ms-keyframes #{$name} {
    @content;
  }

  @-o-keyframes #{$name} {
    @content;
  }
}

// Font Family
@mixin font-family($elem) {
  font-family: get-font-family($elem);
}

// Font-size + Line-height + Kerning
@mixin font-size($elem) {
  font-size: get-font-size($elem);
  line-height: get-line-height($elem);
  letter-spacing: get-kerning($elem);
}

// Font Weight
@mixin font-weight($elem) {
  font-weight: get-font-weight($elem);
}

// Anchor aspect
@mixin anchor-aspect($type: "main", $layout: false) {
  @if ($type== "main") {
    // Base
    @if ($layout== "inverse") {
      color: color(link-inverse);
    } @else {
      color: color(link);
    }

    text-decoration: $link-main--decoration;

    &:hover,
    &:active {
      @if ($layout== "inverse") {
        color: color(link-hover-inverse);
      } @else {
        color: color(link-hover);
      }

      outline: 0;
      text-decoration: $link-main--decoration-hover;
    }
  } @else if ($type== "header") {
    @if ($layout== "inverse") {
      color: color(header-link-inverse);
    } @else {
      color: color(header-link);
    }

    text-decoration: $link-header--decoration;

    &:hover,
    &:active {
      @if ($layout== "inverse") {
        color: color(header-link-hover-inverse);
      } @else {
        color: color(header-link-hover);
      }

      text-decoration: $link-header--decoration-hover;
    }
  } @else if ($type== "header-mobile") {
    color: color(header-link-mobile);

    &:hover,
    &:active {
      color: color(header-link-mobile-hover);
    }
  } @else if ($type== "footer") {
    @if ($layout== "inverse") {
      color: color(footer-link-inverse);
    } @else {
      color: color(footer-link);
    }

    text-decoration: $link-footer--decoration;

    &:hover,
    &:active {
      @if ($layout== "inverse") {
        color: color(footer-link-hover-inverse);
      } @else {
        color: color(footer-link-hover);
      }

      text-decoration: $link-footer--decoration-hover;
    }
  } @else if ($type== "footer-block") {
    @if ($layout== "inverse") {
      color: color(footer-block-link-inverse);
    } @else {
      color: color(footer-block-link);
    }

    text-decoration: $link-footer-block--decoration;

    &:hover,
    &:active {
      @if ($layout== "inverse") {
        color: color(footer-block-link-hover-inverse);
      } @else {
        color: color(footer-block-link-hover);
      }

      text-decoration: $link-footer-block--decoration-hover;
    }
  } @else if ($type== "button-link") {
    @if ($layout== "inverse") {
      color: color(button-link-inverse);
    } @else {
      color: color(button-link);
    }

    text-decoration: $link-button--decoration;

    &:hover,
    &:active {
      @if ($layout== "inverse") {
        color: color(button-link-hover-inverse);
      } @else {
        color: color(button-link-hover);
      }

      text-decoration: $link-button--decoration-hover;
    }
  } @else if ($type== "func-link") {
    @if ($layout== "inverse") {
      color: color(func-link-inverse);
    } @else {
      color: color(func-link);
    }

    text-decoration: $link-func--decoration;

    &:hover,
    &:active {
      @if ($layout== "inverse") {
        color: color(func-link-hover-inverse);
      } @else {
        color: color(func-link-hover);
      }

      text-decoration: $link-func--decoration-hover;
    }
  }
}

// Divider
// Add a line divider to a section container
@mixin divider-mix($layout: false) {
  display: block;
  height: 1px;

  @if ($layout== "inverse") {
    background: color-border(divider-inverse);
  } @else {
    background: color-border(divider);
  }
}

@mixin divider($type: false, $layout: false) {
  @if ($type== "before") {
    position: relative;

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      @include divider-mix($layout);
    }
  } @else if ($type== "after") {
    position: relative;

    &::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      @include divider-mix($layout);
    }
  } @else if ($type== "center") {
    position: relative;

    &::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 0;
      width: 100%;
      z-index: -1;
      @include divider-mix($layout);
    }
  } @else {
    @include divider-mix($layout);
  }
}

// Underline ::after an element
// add underline to an existing html element
@mixin underline($type: "center", $width: 20%, $width-hover: 40%, $duration: 1s, $color: primary, $layout: false) {
  &::after {
    content: "";
    width: $width;
    padding-top: 0.4em;
    background-color: color-bg(underline);
    display: block;
    height: 1px;

    @include vendor-prefix(transition, $duration all ease-in-out);
  }

  &.has-underline-rounded::after {
    border-radius: $img-radius;
  }

  &:hover::after {
    width: $width-hover;
    background-color: color-bg(underline-hover);
  }

  @if ($type== "left") {
    &::after {
      margin: 1em auto 1em 0;
    }
  } @else if ($type== "right") {
    &::after {
      margin: 1em 0 1em auto;
    }
  } @else if ($type== "center") {
    &::after {
      margin: 1em auto;
    }
  }
}

// Underline hr element
// Style an Hr element
@mixin underlineHr($type: "sm", $width: 50%) {
  & {
    width: $width;

    @include vendor-prefix(transition, all 0.5s ease-out);
  }

  @if ($type== "big") {
    & {
      height: 1rem;
      margin: calc(1rem * 3) auto 0 0;
    }
  } @else if ($type== "sm") {
    & {
      height: 0.7rem;
      margin: calc(0.7rem * 3) auto 0 0;
    }
  }
}

// hr underline animation
// Handler the heroscrollable liner movement from  left to right
@mixin underline-left-right($final_width, $duration: 2.3s, $delay: 0) {
  opacity: 1;
  left: 0;
  width: 50%;

  body.scroll-behaviour-underline & {
    @include inline-animation($duration, $delay) {
      0% {
        left: 0;
        width: 50%;
      }

      20% {
        left: 5%;
        width: 40%;
      }

      100% {
        left: calc(#{$final_width} * 2 - #{$hero-underline--width--right-position});
        width: $hero-underline--width--right-position;
        background-color: get-color(primary, 3);
      }
    }
  }
}

// hr underline animation
// Handler the heroscrollable liner movement from right to left
@mixin underline-right-left($initial_width, $duration: 2s, $color: primary, $delay: 0) {
  left: calc(#{$initial_width} * 2 - #{$hero-underline--width--right-position});
  width: $hero-underline--width--right-position;
  background-color: get-color(primary, 3);
  animation-fill-mode: forwards;

  @include inline-animation($duration, $delay) {
    0% {
      left: calc(#{$initial_width} * 2 - #{$hero-underline--width--right-position});
      width: $hero-underline--width--right-position;
      background-color: get-color(primary, 3);
    }

    100% {
      left: 0;
      width: 50%;
      background-color: get-color($color, 3);
    }
  }
}

// Quote
// Add quote in TestimonialItem
@mixin quote {
  position: relative;

  &::before {
    content: "";
    display: block;
    width: 24px;
    height: 18px;
    margin-top: 12px;
    margin-bottom: 16px;
    background-image: inline-svg(
      '<svg width="24" height="18" xmlns="http://www.w3.org/2000/svg"><path d="M0 13.481c0-2.34.611-4.761 1.833-7.263C3.056 3.716 4.733 1.643 6.865 0L11 2.689C9.726 4.382 8.777 6.093 8.152 7.824c-.624 1.73-.936 3.578-.936 5.545V18H0v-4.519zm13 0c0-2.34.611-4.761 1.833-7.263 1.223-2.502 2.9-4.575 5.032-6.218L24 2.689c-1.274 1.693-2.223 3.404-2.848 5.135-.624 1.73-.936 3.578-.936 5.545V18H13v-4.519z" fill="' +
        get-color(secondary, 3) + '" fill-rule="nonzero"/></svg>'
    );
    background-repeat: no-repeat;

    @include vendor-prefix(transition, all 0.5s ease-out);
  }
}

// Handles a scalabale background image related to a specific elements
// $file: name of file (e.g. illustration-element-01.svg)
// $width: (in %) illustration width as a percent of related element width
// $height: (in % or px) illustration height as a percent of related element width (scaling) or illustration height in px
// $vpos: illustration is centered by default, allowed values: top or bottom
// $hoffset: horizontal offset
// $voffset: vertical offset
@mixin illustration($file, $width, $height, $vpos: null, $hoffset: null, $voffset: null) {
  content: "";
  position: absolute;
  width: $width;
  max-width: $width;
  height: $height;
  background-image: url(./../../../svgs/illustrations/#{$file});
  background-repeat: no-repeat;
  z-index: 0;

  @if (unit($height) == "%") {
    background-size: contain;
  } @else {
    background-size: auto;
  }

  @if ($hoffset) {
    left: calc(50% + #{$hoffset});
  } @else {
    left: 50%;
  }

  @if ($vpos== "top") {
    @if ($voffset) {
      top: #{$voffset};
    } @else {
      top: 0;
    }

    background-position: center top;
    @include vendor-prefix(transform, translate(-50%));
  } @else if ($vpos== "bottom") {
    @if ($voffset) {
      bottom: #{$voffset};
    } @else {
      bottom: 0;
    }

    background-position: center bottom;
    @include vendor-prefix(transform, translate(-50%));
  } @else {
    background-position: center;

    @if ($voffset) {
      top: calc(50% + #{$voffset});
    } @else {
      top: 50%;
    }

    @include vendor-prefix(transform, translate(-50%, -50%));
  }
}

// Inline mixin
@mixin inline-animation($duration, $delay: 0) {
  $name: inline-#{unique-id()};

  animation-name: $name;
  animation-duration: $duration;
  animation-delay: $delay;
  animation-fill-mode: forwards;

  @keyframes #{$name} {
    @content;
  }
}

// Typed-animations
// loop through a string and create animations
@mixin loop-str-length-keyframes($string) {
  $string-lenght: str-length($string);

  @for $index from 1 through $string-lenght {
    $name: inline-#{$index};

    @keyframes #{$name} {
      100% {
        content: str-slice($string, 0, $index);
      }
    }
  }
}

@mixin add-typed-animation($string) {
  & {
    $content: $string;
    display: inherit;
    @include loop-str-length-keyframes($content);

    &::before {
      content: $content;
    }

    &[data-typed-speed="100"] {
      $speed: 100;

      &::before {
        @include vendor-prefix(animation, list-of-typed-animations($content, $speed));
        @include vendor-prefix(animation-fill-mode, forwards);
      }
    }

    &[data-typed-speed="200"] {
      $speed: 200;

      &::before {
        @include vendor-prefix(animation, list-of-typed-animations($content, $speed));
        @include vendor-prefix(animation-fill-mode, forwards);
      }
    }
  }

  &.clean-typed.has-cleaner::after {
    content: "";
    @include vendor-prefix(animation, none);
  }
}
